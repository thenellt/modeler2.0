//
//  processor.cpp
//  Map Processor
//
//  Created by Tasman Thenell on 8/17/16.
//  Copyright Â© 2016 Tasman Thenell. All rights reserved.
//

#include "modeler.h"

village::village(int x, int y, vector<int> pop, double rate, string name, int years){
    this->name = name;
    this->x = x;
    this->y = y;
    killRate = rate;

    vectorPop.resize(pop.size());

    vectorPop = pop;

}

int village::getPop(int year){
    //cout << "returning pop: " << population << endl;
    return vectorPop.at(year); //* growth factor;
}

processor::processor(parameters* setup){
    xSize = setup->x;
    ySize = setup->y;
    this->years = setup->years;
    cout << "years: " << years << endl;
    carryCapacity = setup->carryCapacity;
    huntRange = setup->huntRange;
    HpHy = setup->huntsPerYear;
    killProb = setup->killProb;
    startYear = setup->startYear;

    this->animalDiffRate = setup->animalDiffRate;
    this->animalGrowthRate = setup->animalGrowthRate;
    this->encounterRate = setup->encounterRate;
    this->theta = setup->theta;
    this->diffusionSamples = setup->diffusionSamples;

    if(setup->geolocation){
        geoX = setup->geoX;
        geoY = setup->geoY;
        geolocation = true;
    }
    else{
        geolocation = false;
    }

    //make grid
    grid = new double**[years + 1];
    for(int i = 0; i < years + 1; i++){
        cout << "on year: " << i << endl;
        grid[i] = new double*[ySize];
        for(int j = 0; j < ySize; j++){
            grid[i][j] = new double[xSize]();
        }
    }

    for(int i = 0; i < ySize; i++){
        for(int j = 0; j < xSize; j++){
            grid[0][i][j] = carryCapacity;
        }
    }

    output = new int[5];

    for(int i = 0; i < 5; i++){
        output[i] = setup->output[i];
    }

    directory = setup->workingPath;
    this->name = setup->name;

    std::cout << "end of the processor constructor" << endl;
}

void processor::runSimulation(){
    int count;
    double top, bot, locationValue;
    double **yearlyGrid = new double*[ySize]; //n2
    double **growth = new double*[ySize];
    double **effort = new double*[ySize];
    for(int i = 0; i < ySize; i++){
        yearlyGrid[i] = new double[xSize];
        growth[i] = new double[xSize];
        effort[i] = new double[xSize];
    }

    std::cout << "at the start of main loop" << endl;
    for(int curYear = 0; curYear < years; curYear++){
        cout << "current year is: " << curYear << endl;
        count = 0;
        double a, b, c, d, e;
        for(int i = 0; i < diffusionSamples; i++){
            qDebug() << "doing sample: " << i << endl;
            for(int y = 0; y < ySize; y++){
                for(int x = 0; x < xSize; x++){
                    if(y > 0 && y < ySize - 1){
                        if(x > 0 && x < xSize - 1){
                            if(i != 0){
                                a = yearlyGrid[y+1][x] + grid[curYear][y+1][x];
                                b = yearlyGrid[y-1][x] + grid[curYear][y-1][x];
                                c = yearlyGrid[y][x] + grid[curYear][y][x];
                                d = yearlyGrid[y][x+1] + grid[curYear][y][x+1];
                                e = yearlyGrid[y][x-1] + grid[curYear][y+1][x-1];
                                yearlyGrid[y][x] += (animalDiffRate*(a + b) + (1-4*animalDiffRate)*(c + animalDiffRate*(d + e)))/diffusionSamples;
                            }
                            else{
                                yearlyGrid[y][x] = (animalDiffRate*(grid[curYear][y+1][x] + grid[curYear][y-1][x]) + (1-4*animalDiffRate)*grid[curYear][y][x] + animalDiffRate*(grid[curYear][y][x+1] + grid[curYear][y][x-1]))/diffusionSamples;
                            }
                        }
                        else{
                            yearlyGrid[y][x] = carryCapacity;
                        }
                    }
                    else{
                        yearlyGrid[y][x] = carryCapacity;
                    }
                }
            }
        }

        for(int y = 0; y < ySize; y++){
            for(int x = 0; x < xSize; x++){
                count = count + 1;

                //d*(n[year,i+1,j]+n[year,i-1,j])+(1-4*d)*n[year,i,j]+d*(n[year,i,j+1]+n[year,i,j-1])
                if(y > 0 && y < ySize - 1){
                    if(x > 0 && x < xSize - 1){
                        /*
                        if(diffusionSamples == 1){
                            yearlyGrid[y][x] = animalDiffRate*(grid[curYear][y+1][x] + grid[curYear][y-1][x]) + (1-4*animalDiffRate)*grid[curYear][y][x] + animalDiffRate*(grid[curYear][y][x+1] + grid[curYear][y][x-1]);
                        }
                        else{
                            for(int k = 0; k < diffusionSamples; k++){
                                if(k == 1){
                                    yearlyGrid[y][x] = animalDiffRate*(grid[curYear][y+1][x] + grid[curYear][y-1][x]) + (1-4*animalDiffRate)*grid[curYear][y][x] + animalDiffRate*(grid[curYear][y][x+1] + grid[curYear][y][x-1]);

                                }
                                else{

                                }
                            }
                        }
                        */
                        yearlyGrid[y][x] = animalDiffRate*(grid[curYear][y+1][x] + grid[curYear][y-1][x]) + (1-4*animalDiffRate)*grid[curYear][y][x] + animalDiffRate*(grid[curYear][y][x+1] + grid[curYear][y][x-1]);
                        //* getNeighborTotals(curYear, x, y);
                    }
                    else{
                        yearlyGrid[y][x] = carryCapacity;
                    }
                }
                else{
                    yearlyGrid[y][x] = carryCapacity;
                }

                for(int settleNum = 0; settleNum < towns.size(); settleNum++){
                    //((comlocation[numb,0]-i)**2+(comlocation[numb,1]-j)**2))
                    locationValue = pow(towns[settleNum]->x - x, 2) + pow(towns[settleNum]->y - y, 2);

                    //math.exp(-1/(2*std**2)*locationValue
                    top = exp((-1)/(2*pow(huntRange, 2))*locationValue);

                    //(2*math.pi*math.sqrt(locationValue+1)
                    bot = 2*M_PI*sqrt(locationValue) + 1;
                    //cout << "top: " << top << " bot: " << bot << endl;
                    if(settleNum == 0){
                        effort[y][x] = (HpHy*towns[settleNum]->getPop(curYear)*top)/bot;
                    }
                    else{
                        effort[y][x] = effort[y][x] + (HpHy*towns[settleNum]->getPop(curYear)*top)/bot;
                    }
                    //cout << "effort at: " << x << " " << y << " " << effort[y][x] << endl;
                }
                //n[year,:,:]*lambdas-lambdas*n[year,:,:]*(n[year,:,:]/density)**theta
                growth[y][x] = animalGrowthRate*grid[curYear][y][x] - animalGrowthRate*grid[curYear][y][x]*pow((grid[curYear][y][x]/carryCapacity), theta);

                //cout << "yearly grid - stuff + growth" << endl;
                //cout << "yearly grid: " << yearlyGrid[y][x] << " stuff: " << killProb*encounterRate*effort[y][x]*grid[curYear][y][x] << " growth: " << growth[y][x] << endl;

                grid[curYear + 1][y][x] = (yearlyGrid[y][x] + growth[y][x]) - killProb*encounterRate*effort[y][x]*grid[curYear][y][x];
            }
        }
        /* debug stuff
        cout << "grids at the end of year: " << curYear << endl;
        cout << "yearlyGrid: " << endl;
        for(int y = 0; y < ySize; y++){
            for(int x = 0; x < xSize; x++){
                cout << yearlyGrid[y][x] << " ";
            }
            cout << endl;
        }
        cout << "effort: " << endl;
        for(int y = 0; y < ySize; y++){
            for(int x = 0; x < xSize; x++){
                cout << effort[y][x] << " ";
            }
            cout << endl;
        }
        cout << "overall grid: " << endl;
        for(int y = 0; y < ySize; y++){
            for(int x = 0; x < xSize; x++){
                cout << grid[curYear + 1][y][x] << " ";
            }
            cout << endl;
        }

         */
        for(int y = 0; y < ySize; y++){
            for(int x = 0; x < xSize; x++){
                if(grid[curYear + 1][y][x] < 0){
                    grid[curYear + 1][y][x] = 0;
                }
            }
        }
        emit progressUpdate(curYear + 1);
    }

    for(int i = 0; i < ySize; i++){
        free(yearlyGrid[i]);
        free(growth[i]);
        free(effort[i]);
    }

    free(yearlyGrid);
    free(growth);
    free(effort);

    generateOutput();
}

double processor::getNeighborTotals(int year, int x, int y){
    double total = 0;
    total = grid[year][y + 1][x];
    total += grid[year][y - 1][x];
    total += grid[year][y][x + 1];
    total += grid[year][y][x - 1];
    total -= 4*grid[year][y][x];
    return total;
}

void processor::addVillage(village *newTown){
    if(geolocation){
        //convert lat long position into x, y of grid.
    }
    cout << "adding a town with " << newTown->vectorPop.at(0) << " population." << endl;
    towns.push_back(newTown);
}

void processor::printResults(){
    for(int time = 0; time < years + 1; time++){
        cout << "Grid for year: " << time + 1 << endl;
        for(int y = 0; y < ySize; y++){
            for(int x = 0; x < xSize; x++){
                cout << grid[time][y][x] << " ";
            }
            cout << endl;
        }
    }
}

void processor::dumpForHeatmap(){
    ofstream out("test.txt");

    if(out.is_open()){
        for(int i = 0; i < ySize; i++){
            for(int j = 0; j < xSize; j++){
                out << i << " " << j << " " << 10*((carryCapacity - grid[years][i][j])/carryCapacity) << endl;
            }
        }
    }
    else{
        cout << "problem opening file" << endl;
    }
}

void processor::generateHeatmap(int year){
    cout << "scale factor is: " << output[4] << endl;
    heatmap_t* newMap = heatmap_new(xSize*output[4], ySize*output[4]);
    heatmap_stamp_t* stamp;
    if(output[4] > 1){
        stamp = heatmap_stamp_gen(output[4] + 1);
    }
    else{
        stamp = heatmap_stamp_gen(1);
    }

    static const unsigned char discrete_data[] = {
        0, 0, 0, 0, 94, 79, 162, 255, 50, 136, 189, 255, 102, 194, 165, 255, 171, 221, 164, 255, 230, 245, 152, 255, 241, 243, 167, 255, 254, 224, 144, 255, 253, 174, 97, 255, 244, 109, 67, 255, 213, 62, 79, 255, 158, 1, 66, 255
    };

    /*
    static const unsigned char discrete_data[] = {
        0, 0, 0, 0, 127, 0, 37, 0, 128, 0, 38, 7, 128, 0, 38, 14, 129, 0, 38, 22, 129, 0, 38, 29, 130, 0, 38, 37, 130, 0, 38, 44, 131, 0, 38, 52, 131, 0, 38, 59, 132, 0, 38, 67, 132, 0, 38, 74, 133, 0, 38, 82, 133, 0, 38, 89, 134, 0, 38, 97, 134, 0, 38, 104, 135, 0, 38, 112, 135, 0, 38, 119, 136, 0, 38, 127, 136, 0, 38, 134, 137, 0, 38, 141, 137, 0, 38, 149, 138, 0, 38, 156, 138, 0, 38, 164, 138, 0, 38, 171, 139, 0, 38, 179, 139, 0, 38, 186, 140, 0, 39, 194, 140, 0, 39, 201, 141, 0, 39, 209, 141, 0, 39, 216, 142, 0, 39, 224, 142, 0, 39, 231, 143, 0, 39, 239, 143, 0, 39, 246, 144, 0, 39, 254, 144, 0, 39, 255, 145, 0, 39, 255, 145, 0, 39, 255, 146, 0, 39, 255, 146, 0, 39, 255, 147, 0, 39, 255, 147, 0, 39, 255, 148, 0, 39, 255, 148, 0, 39, 255, 149, 0, 39, 255, 149, 0, 39, 255, 150, 0, 39, 255, 150, 0, 39, 255, 150, 0, 39, 255, 151, 0, 39, 255, 151, 0, 39, 255, 152, 0, 39, 255, 152, 0, 39, 255, 153, 0, 39, 255, 153, 0, 39, 255, 154, 0, 39, 255, 154, 0, 39, 255, 155, 0, 39, 255, 155, 0, 39, 255, 156, 0, 39, 255, 156, 0, 39, 255, 157, 0, 39, 255, 157, 0, 39, 255, 158, 0, 39, 255, 158, 0, 39, 255, 159, 0, 39, 255, 159, 0, 39, 255, 160, 0, 39, 255, 160, 0, 39, 255, 161, 0, 39, 255, 161, 0, 39, 255, 161, 0, 39, 255, 162, 0, 39, 255, 162, 0, 39, 255, 163, 0, 39, 255, 163, 0, 39, 255, 164, 0, 39, 255, 164, 0, 39, 255, 165, 0, 39, 255, 165, 0, 39, 255, 166, 0, 39, 255, 166, 0, 39, 255, 167, 0, 39, 255, 167, 0, 39, 255, 168, 0, 39, 255, 168, 0, 39, 255, 169, 0, 39, 255, 169, 0, 39, 255, 170, 0, 39, 255, 170, 0, 39, 255, 171, 0, 39, 255, 171, 0, 39, 255, 171, 0, 39, 255, 172, 0, 39, 255, 172, 0, 39, 255, 173, 0, 39, 255, 173, 0, 39, 255, 174, 0, 39, 255, 174, 0, 39, 255, 175, 0, 39, 255, 175, 0, 39, 255, 176, 0, 39, 255, 176, 0, 39, 255, 177, 0, 39, 255, 177, 0, 39, 255, 178, 0, 38, 255, 178, 0, 38, 255, 179, 0, 38, 255, 179, 0, 38, 255, 180, 0, 38, 255, 180, 0, 38, 255, 180, 0, 38, 255, 181, 0, 38, 255, 181, 0, 38, 255, 182, 0, 38, 255, 182, 0, 38, 255, 183, 0, 38, 255, 183, 0, 38, 255, 184, 0, 38, 255, 184, 0, 38, 255, 185, 0, 38, 255, 185, 0, 38, 255, 186, 0, 38, 255, 186, 0, 38, 255, 187, 0, 38, 255, 187, 0, 38, 255, 188, 0, 38, 255, 188, 0, 38, 255, 188, 0, 37, 255, 189, 0, 37, 255, 189, 0, 37, 255, 189, 0, 37, 255, 190, 0, 37, 255, 190, 0, 37, 255, 190, 0, 37, 255, 191, 0, 37, 255, 191, 1, 37, 255, 191, 1, 37, 255, 192, 1, 37, 255, 192, 1, 37, 255, 192, 1, 37, 255, 192, 1, 37, 255, 193, 1, 37, 255, 193, 2, 37, 255, 193, 2, 37, 255, 194, 2, 37, 255, 194, 2, 37, 255, 194, 2, 37, 255, 195, 2, 37, 255, 195, 2, 37, 255, 195, 3, 36, 255, 195, 3, 36, 255, 196, 3, 36, 255, 196, 3, 36, 255, 196, 3, 36, 255, 197, 3, 36, 255, 197, 4, 36, 255, 197, 4, 36, 255, 198, 4, 36, 255, 198, 4, 36, 255, 198, 4, 36, 255, 199, 5, 36, 255, 199, 5, 36, 255, 199, 5, 36, 255, 199, 5, 36, 255, 200, 5, 36, 255, 200, 6, 36, 255, 200, 6, 35, 255, 201, 6, 35, 255, 201, 6, 35, 255, 201, 6, 35, 255, 202, 7, 35, 255, 202, 7, 35, 255, 202, 7, 35, 255, 202, 7, 35, 255, 203, 7, 35, 255, 203, 8, 35, 255, 203, 8, 35, 255, 204, 8, 35, 255, 204, 8, 35, 255, 204, 8, 35, 255, 205, 9, 35, 255, 205, 9, 35, 255, 205, 9, 34, 255, 205, 9, 34, 255, 206, 10, 34, 255, 206, 10, 34, 255, 206, 10, 34, 255, 207, 10, 34, 255, 207, 11, 34, 255, 207, 11, 34, 255, 207, 11, 34, 255, 208, 11, 34, 255, 208, 12, 34, 255, 208, 12, 34, 255, 209, 12, 34, 255, 209, 12, 33, 255, 209, 12, 33, 255, 210, 13, 33, 255, 210, 13, 33, 255, 210, 13, 33, 255, 210, 13, 33, 255, 211, 14, 33, 255, 211, 14, 33, 255, 211, 14, 33, 255, 212, 14, 33, 255, 212, 15, 33, 255, 212, 15, 33, 255, 213, 15, 33, 255, 213, 15, 32, 255, 213, 15, 32, 255, 213, 16, 32, 255, 214, 16, 32, 255, 214, 16, 32, 255, 214, 16, 32, 255, 215, 17, 32, 255, 215, 17, 32, 255, 215, 17, 32, 255, 215, 17, 32, 255, 216, 17, 32, 255, 216, 18, 31, 255, 216, 18, 31, 255, 217, 18, 31, 255, 217, 18, 31, 255, 217, 19, 31, 255, 218, 19, 31, 255, 218, 19, 31, 255, 218, 19, 31, 255, 218, 19, 31, 255, 219, 20, 31, 255, 219, 20, 30, 255, 219, 20, 30, 255, 220, 20, 30, 255, 220, 20, 30, 255, 220, 21, 30, 255, 220, 21, 30, 255, 221, 21, 30, 255, 221, 21, 30, 255, 221, 22, 30, 255, 222, 22, 29, 255, 222, 22, 29, 255, 222, 22, 29, 255, 222, 22, 29, 255, 223, 23, 29, 255, 223, 23, 29, 255, 223, 23, 29, 255, 224, 23, 29, 255, 224, 24, 29, 255, 224, 24, 28, 255, 224, 24, 28, 255, 225, 24, 28, 255, 225, 24, 28, 255, 225, 25, 28, 255, 226, 25, 28, 255, 226, 25, 28, 255, 226, 25, 28, 255, 226, 26, 27, 255, 227, 26, 28, 255, 227, 27, 28, 255, 227, 27, 28, 255, 227, 28, 28, 255, 227, 29, 28, 255, 228, 29, 28, 255, 228, 30, 28, 255, 228, 30, 28, 255, 228, 31, 28, 255, 228, 32, 28, 255, 229, 32, 29, 255, 229, 33, 29, 255, 229, 33, 29, 255, 229, 34, 29, 255, 229, 34, 29, 255, 230, 35, 29, 255, 230, 35, 29, 255, 230, 36, 29, 255, 230, 36, 29, 255, 230, 37, 29, 255, 231, 37, 30, 255, 231, 38, 30, 255, 231, 38, 30, 255, 231, 39, 30, 255, 231, 39, 30, 255, 232, 40, 30, 255, 232, 40, 30, 255, 232, 41, 30, 255, 232, 41, 30, 255, 232, 42, 31, 255, 233, 42, 31, 255, 233, 42, 31, 255, 233, 43, 31, 255, 233, 43, 31, 255, 233, 44, 31, 255, 234, 44, 31, 255, 234, 45, 31, 255, 234, 45, 31, 255, 234, 46, 31, 255, 234, 46, 32, 255, 235, 46, 32, 255, 235, 47, 32, 255, 235, 47, 32, 255, 235, 48, 32, 255, 235, 48, 32, 255, 236, 48, 32, 255, 236, 49, 32, 255, 236, 49, 32, 255, 236, 50, 33, 255, 236, 50, 33, 255, 237, 51, 33, 255, 237, 51, 33, 255, 237, 51, 33, 255, 237, 52, 33, 255, 237, 52, 33, 255, 238, 53, 33, 255, 238, 53, 33, 255, 238, 53, 33, 255, 238, 54, 34, 255, 238, 54, 34, 255, 238, 54, 34, 255, 239, 55, 34, 255, 239, 55, 34, 255, 239, 56, 34, 255, 239, 56, 34, 255, 239, 56, 34, 255, 240, 57, 34, 255, 240, 57, 35, 255, 240, 57, 35, 255, 240, 58, 35, 255, 240, 58, 35, 255, 241, 59, 35, 255, 241, 59, 35, 255, 241, 59, 35, 255, 241, 60, 35, 255, 241, 60, 35, 255, 242, 60, 36, 255, 242, 61, 36, 255, 242, 61, 36, 255, 242, 61, 36, 255, 242, 62, 36, 255, 243, 62, 36, 255, 243, 63, 36, 255, 243, 63, 36, 255, 243, 63, 36, 255, 243, 64, 37, 255, 244, 64, 37, 255, 244, 64, 37, 255, 244, 65, 37, 255, 244, 65, 37, 255, 244, 65, 37, 255, 245, 66, 37, 255, 245, 66, 37, 255, 245, 66, 38, 255, 245, 67, 38, 255, 245, 67, 38, 255, 246, 67, 38, 255, 246, 68, 38, 255, 246, 68, 38, 255, 246, 68, 38, 255, 246, 69, 38, 255, 246, 69, 38, 255, 247, 69, 39, 255, 247, 70, 39, 255, 247, 70, 39, 255, 247, 70, 39, 255, 247, 71, 39, 255, 248, 71, 39, 255, 248, 71, 39, 255, 248, 72, 39, 255, 248, 72, 39, 255, 248, 72, 40, 255, 249, 73, 40, 255, 249, 73, 40, 255, 249, 73, 40, 255, 249, 74, 40, 255, 249, 74, 40, 255, 250, 74, 40, 255, 250, 75, 40, 255, 250, 75, 41, 255, 250, 75, 41, 255, 250, 76, 41, 255, 251, 76, 41, 255, 251, 76, 41, 255, 251, 77, 41, 255, 251, 77, 41, 255, 251, 77, 41, 255, 251, 78, 41, 255, 252, 78, 42, 255, 252, 79, 42, 255, 252, 79, 42, 255, 252, 80, 42, 255, 252, 81, 42, 255, 252, 81, 42, 255, 252, 82, 42, 255, 252, 82, 42, 255, 252, 83, 42, 255, 252, 84, 42, 255, 252, 84, 42, 255, 252, 85, 42, 255, 252, 85, 42, 255, 252, 86, 42, 255, 252, 87, 42, 255, 252, 87, 42, 255, 252, 88, 42, 255, 252, 88, 42, 255, 252, 89, 42, 255, 252, 89, 42, 255, 252, 90, 42, 255, 252, 91, 43, 255, 252, 91, 43, 255, 252, 92, 43, 255, 252, 92, 43, 255, 252, 93, 43, 255, 252, 93, 43, 255, 252, 94, 43, 255, 252, 94, 43, 255, 252, 95, 43, 255, 252, 95, 43, 255, 252, 96, 43, 255, 252, 97, 43, 255, 252, 97, 43, 255, 252, 98, 44, 255, 252, 98, 44, 255, 252, 99, 44, 255, 252, 99, 44, 255, 252, 100, 44, 255, 252, 100, 44, 255, 252, 101, 44, 255, 252, 101, 44, 255, 252, 102, 44, 255, 252, 102, 44, 255, 252, 103, 45, 255, 252, 103, 45, 255, 252, 104, 45, 255, 252, 104, 45, 255, 252, 105, 45, 255, 252, 105, 45, 255, 252, 106, 45, 255, 252, 106, 45, 255, 252, 107, 45, 255, 252, 107, 46, 255, 252, 108, 46, 255, 252, 108, 46, 255, 252, 109, 46, 255, 252, 109, 46, 255, 252, 110, 46, 255, 252, 110, 46, 255, 252, 111, 46, 255, 252, 111, 47, 255, 252, 112, 47, 255, 252, 112, 47, 255, 252, 113, 47, 255, 252, 113, 47, 255, 252, 114, 47, 255, 252, 114, 47, 255, 252, 114, 48, 255, 252, 115, 48, 255, 252, 115, 48, 255, 252, 116, 48, 255, 252, 116, 48, 255, 252, 117, 48, 255, 252, 117, 49, 255, 252, 118, 49, 255, 252, 118, 49, 255, 252, 119, 49, 255, 252, 119, 49, 255, 252, 120, 49, 255, 252, 120, 50, 255, 252, 121, 50, 255, 252, 121, 50, 255, 252, 121, 50, 255, 252, 122, 50, 255, 252, 122, 50, 255, 252, 123, 51, 255, 252, 123, 51, 255, 252, 124, 51, 255, 252, 124, 51, 255, 252, 125, 51, 255, 252, 125, 52, 255, 252, 125, 52, 255, 252, 126, 52, 255, 252, 126, 52, 255, 252, 127, 52, 255, 252, 127, 53, 255, 252, 128, 53, 255, 253, 128, 53, 255, 253, 129, 53, 255, 253, 129, 53, 255, 253, 129, 54, 255, 253, 130, 54, 255, 253, 130, 54, 255, 253, 131, 54, 255, 253, 131, 54, 255, 253, 132, 55, 255, 253, 132, 55, 255, 253, 132, 55, 255, 253, 133, 55, 255, 253, 133, 55, 255, 253, 134, 56, 255, 253, 134, 56, 255, 253, 135, 56, 255, 253, 135, 56, 255, 253, 135, 57, 255, 253, 136, 57, 255, 253, 136, 57, 255, 253, 137, 57, 255, 253, 137, 58, 255, 253, 138, 58, 255, 253, 138, 58, 255, 253, 138, 58, 255, 253, 139, 59, 255, 253, 139, 59, 255, 253, 140, 59, 255, 253, 140, 59, 255, 252, 141, 59, 255, 253, 141, 60, 255, 253, 141, 60, 255, 253, 141, 60, 255, 253, 142, 60, 255, 253, 142, 60, 255, 253, 142, 60, 255, 253, 143, 60, 255, 253, 143, 60, 255, 253, 143, 60, 255, 253, 144, 60, 255, 253, 144, 60, 255, 253, 144, 60, 255, 253, 144, 61, 255, 253, 145, 61, 255, 253, 145, 61, 255, 253, 145, 61, 255, 253, 146, 61, 255, 253, 146, 61, 255, 253, 146, 61, 255, 253, 147, 61, 255, 253, 147, 61, 255, 253, 147, 61, 255, 253, 147, 61, 255, 253, 148, 61, 255, 253, 148, 62, 255, 253, 148, 62, 255, 253, 149, 62, 255, 253, 149, 62, 255, 253, 149, 62, 255, 253, 149, 62, 255, 253, 150, 62, 255, 253, 150, 62, 255, 253, 150, 62, 255, 253, 151, 62, 255, 253, 151, 63, 255, 253, 151, 63, 255, 253, 152, 63, 255, 253, 152, 63, 255, 253, 152, 63, 255, 253, 152, 63, 255, 253, 153, 63, 255, 253, 153, 63, 255, 253, 153, 63, 255, 253, 154, 63, 255, 253, 154, 64, 255, 253, 154, 64, 255, 253, 154, 64, 255, 253, 155, 64, 255, 253, 155, 64, 255, 253, 155, 64, 255, 253, 156, 64, 255, 253, 156, 64, 255, 253, 156, 65, 255, 253, 156, 65, 255, 253, 157, 65, 255, 253, 157, 65, 255, 253, 157, 65, 255, 253, 158, 65, 255, 253, 158, 65, 255, 253, 158, 65, 255, 253, 159, 65, 255, 253, 159, 66, 255, 253, 159, 66, 255, 253, 159, 66, 255, 253, 160, 66, 255, 253, 160, 66, 255, 253, 160, 66, 255, 253, 161, 66, 255, 253, 161, 66, 255, 253, 161, 67, 255, 253, 161, 67, 255, 253, 162, 67, 255, 253, 162, 67, 255, 253, 162, 67, 255, 253, 163, 67, 255, 253, 163, 67, 255, 253, 163, 68, 255, 253, 163, 68, 255, 253, 164, 68, 255, 253, 164, 68, 255, 253, 164, 68, 255, 253, 165, 68, 255, 253, 165, 68, 255, 253, 165, 69, 255, 253, 165, 69, 255, 253, 166, 69, 255, 253, 166, 69, 255, 253, 166, 69, 255, 253, 167, 69, 255, 253, 167, 69, 255, 253, 167, 70, 255, 253, 167, 70, 255, 253, 168, 70, 255, 253, 168, 70, 255, 253, 168, 70, 255, 253, 169, 70, 255, 253, 169, 70, 255, 253, 169, 71, 255, 253, 169, 71, 255, 253, 170, 71, 255, 253, 170, 71, 255, 253, 170, 71, 255, 253, 171, 71, 255, 253, 171, 72, 255, 253, 171, 72, 255, 253, 171, 72, 255, 253, 172, 72, 255, 253, 172, 72, 255, 253, 172, 72, 255, 253, 172, 72, 255, 253, 173, 73, 255, 253, 173, 73, 255, 253, 173, 73, 255, 253, 174, 73, 255, 253, 174, 73, 255, 254, 174, 73, 255, 254, 174, 74, 255, 254, 175, 74, 255, 254, 175, 74, 255, 254, 175, 74, 255, 254, 176, 74, 255, 254, 176, 74, 255, 254, 176, 75, 255, 254, 176, 75, 255, 254, 177, 75, 255, 254, 177, 75, 255, 254, 177, 75, 255, 253, 178, 75, 255, 253, 178, 76, 255, 253, 178, 76, 255, 253, 178, 76, 255, 253, 179, 77, 255, 253, 179, 77, 255, 253, 179, 77, 255, 253, 180, 77, 255, 253, 180, 78, 255, 253, 180, 78, 255, 253, 181, 78, 255, 253, 181, 79, 255, 253, 181, 79, 255, 253, 182, 79, 255, 253, 182, 80, 255, 253, 182, 80, 255, 253, 183, 80, 255, 253, 183, 80, 255, 253, 183, 81, 255, 253, 184, 81, 255, 253, 184, 81, 255, 253, 184, 82, 255, 253, 184, 82, 255, 253, 185, 82, 255, 253, 185, 82, 255, 253, 185, 83, 255, 253, 186, 83, 255, 253, 186, 83, 255, 253, 186, 84, 255, 253, 187, 84, 255, 253, 187, 84, 255, 253, 187, 85, 255, 253, 188, 85, 255, 253, 188, 85, 255, 253, 188, 86, 255, 253, 189, 86, 255, 253, 189, 86, 255, 253, 189, 86, 255, 253, 190, 87, 255, 253, 190, 87, 255, 253, 190, 87, 255, 253, 190, 88, 255, 253, 191, 88, 255, 253, 191, 88, 255, 253, 191, 89, 255, 253, 192, 89, 255, 253, 192, 89, 255, 253, 192, 90, 255, 253, 193, 90, 255, 253, 193, 90, 255, 253, 193, 91, 255, 253, 194, 91, 255, 253, 194, 91, 255, 253, 194, 92, 255, 253, 194, 92, 255, 253, 195, 92, 255, 253, 195, 93, 255, 253, 195, 93, 255, 253, 196, 93, 255, 253, 196, 93, 255, 253, 196, 94, 255, 253, 197, 94, 255, 253, 197, 94, 255, 253, 197, 95, 255, 253, 197, 95, 255, 253, 198, 95, 255, 253, 198, 96, 255, 253, 198, 96, 255, 253, 199, 96, 255, 253, 199, 97, 255, 253, 199, 97, 255, 253, 200, 97, 255, 253, 200, 98, 255, 253, 200, 98, 255, 253, 201, 98, 255, 253, 201, 99, 255, 253, 201, 99, 255, 253, 201, 99, 255, 253, 202, 100, 255, 253, 202, 100, 255, 253, 202, 100, 255, 253, 203, 101, 255, 253, 203, 101, 255, 253, 203, 102, 255, 253, 204, 102, 255, 253, 204, 102, 255, 253, 204, 103, 255, 253, 204, 103, 255, 253, 205, 103, 255, 253, 205, 104, 255, 253, 205, 104, 255, 253, 206, 104, 255, 253, 206, 105, 255, 253, 206, 105, 255, 253, 207, 105, 255, 253, 207, 106, 255, 253, 207, 106, 255, 253, 207, 106, 255, 253, 208, 107, 255, 253, 208, 107, 255, 253, 208, 107, 255, 253, 209, 108, 255, 253, 209, 108, 255, 253, 209, 108, 255, 253, 209, 109, 255, 253, 210, 109, 255, 253, 210, 110, 255, 253, 210, 110, 255, 253, 211, 110, 255, 253, 211, 111, 255, 253, 211, 111, 255, 253, 212, 111, 255, 253, 212, 112, 255, 253, 212, 112, 255, 253, 212, 112, 255, 253, 213, 113, 255, 253, 213, 113, 255, 253, 213, 113, 255, 253, 214, 114, 255, 253, 214, 114, 255, 253, 214, 115, 255, 253, 214, 115, 255, 253, 215, 115, 255, 253, 215, 116, 255, 253, 215, 116, 255, 253, 216, 116, 255, 253, 216, 117, 255, 253, 216, 117, 255, 253, 217, 117, 255, 253, 217, 118, 255, 253, 217, 118, 255, 253, 217, 118, 255, 253, 217, 119, 255, 253, 217, 119, 255, 253, 217, 119, 255, 253, 218, 120, 255, 253, 218, 120, 255, 253, 218, 120, 255, 253, 218, 121, 255, 253, 218, 121, 255, 253, 218, 121, 255, 253, 219, 122, 255, 253, 219, 122, 255, 253, 219, 122, 255, 253, 219, 123, 255, 253, 219, 123, 255, 253, 219, 123, 255, 253, 220, 124, 255, 253, 220, 124, 255, 253, 220, 124, 255, 253, 220, 125, 255, 253, 220, 125, 255, 253, 220, 125, 255, 253, 221, 126, 255, 253, 221, 126, 255, 253, 221, 126, 255, 253, 221, 127, 255, 253, 221, 127, 255, 253, 221, 127, 255, 253, 222, 128, 255, 253, 222, 128, 255, 253, 222, 128, 255, 253, 222, 129, 255, 253, 222, 129, 255, 253, 222, 129, 255, 253, 222, 130, 255, 253, 223, 130, 255, 253, 223, 130, 255, 253, 223, 131, 255, 253, 223, 131, 255, 253, 223, 131, 255, 254, 223, 132, 255, 254, 224, 132, 255, 254, 224, 132, 255, 254, 224, 133, 255, 254, 224, 133, 255, 254, 224, 133, 255, 254, 224, 133, 255, 254, 225, 134, 255, 254, 225, 134, 255, 254, 225, 134, 255, 254, 225, 135, 255, 254, 225, 135, 255, 254, 225, 135, 255, 254, 225, 136, 255, 254, 226, 136, 255, 254, 226, 136, 255, 254, 226, 137, 255, 254, 226, 137, 255, 254, 226, 137, 255, 254, 226, 138, 255, 254, 227, 138, 255, 254, 227, 138, 255, 254, 227, 139, 255, 254, 227, 139, 255, 254, 227, 139, 255, 254, 227, 140, 255, 254, 228, 140, 255, 254, 228, 140, 255, 254, 228, 141, 255, 254, 228, 141, 255, 254, 228, 141, 255, 254, 228, 142, 255, 254, 228, 142, 255, 254, 229, 142, 255, 254, 229, 143, 255, 254, 229, 143, 255, 254, 229, 143, 255, 254, 229, 144, 255, 254, 229, 144, 255, 254, 230, 144, 255, 254, 230, 145, 255, 254, 230, 145, 255, 254, 230, 145, 255, 254, 230, 146, 255, 254, 230, 146, 255, 254, 230, 146, 255, 254, 231, 147, 255, 254, 231, 147, 255, 254, 231, 147, 255, 254, 231, 148, 255, 254, 231, 148, 255, 254, 231, 148, 255, 254, 232, 149, 255, 254, 232, 149, 255, 254, 232, 149, 255, 254, 232, 150, 255, 254, 232, 150, 255, 254, 232, 150, 255, 254, 232, 151, 255, 254, 233, 151, 255, 254, 233, 151, 255, 254, 233, 152, 255, 254, 233, 152, 255, 254, 233, 152, 255, 254, 233, 153, 255, 254, 233, 153, 255, 254, 234, 153, 255, 254, 234, 154, 255, 254, 234, 154, 255, 254, 234, 154, 255, 254, 234, 155, 255, 254, 234, 155, 255, 254, 235, 155, 255, 254, 235, 156, 255, 254, 235, 156, 255, 254, 235, 156, 255, 254, 235, 157, 255, 254, 235, 157, 255, 254, 235, 157, 255, 254, 236, 158, 255, 254, 236, 158, 255, 254, 236, 158, 255, 254, 236, 159, 255, 254, 236, 159, 255, 254, 236, 159, 255, 254, 237, 159, 255, 254, 237, 160, 255, 254, 237, 160, 255, 254, 237, 161, 255, 254, 237, 161, 255, 254, 237, 161, 255, 254, 237, 162, 255, 254, 238, 162, 255, 254, 238, 162, 255, 254, 238, 163, 255, 254, 238, 163, 255, 254, 238, 163, 255, 254, 238, 164, 255, 254, 238, 164, 255, 254, 239, 164, 255, 254, 239, 165, 255, 254, 239, 165, 255, 254, 239, 165, 255, 254, 239, 166, 255, 254, 239, 166, 255, 254, 240, 166, 255, 254, 240, 167, 255, 254, 240, 167, 255, 254, 240, 167, 255, 254, 240, 168, 255, 254, 240, 168, 255, 254, 240, 168, 255, 254, 241, 169, 255, 254, 241, 169, 255, 254, 241, 169, 255, 254, 241, 170, 255, 254, 241, 170, 255, 254, 241, 170, 255, 254, 241, 171, 255, 254, 242, 171, 255, 254, 242, 171, 255, 254, 242, 172, 255, 254, 242, 172, 255, 254, 242, 172, 255, 254, 242, 173, 255, 254, 242, 173, 255, 254, 243, 174, 255, 254, 243, 174, 255, 254, 243, 174, 255, 254, 243, 175, 255, 254, 243, 175, 255, 254, 243, 175, 255, 254, 243, 176, 255, 254, 244, 176, 255, 254, 244, 176, 255, 254, 244, 177, 255, 254, 244, 177, 255, 254, 244, 177, 255, 254, 244, 178, 255, 254, 244, 178, 255, 254, 245, 178, 255, 254, 245, 179, 255, 254, 245, 179, 255, 254, 245, 179, 255, 254, 245, 180, 255, 254, 245, 180, 255, 254, 245, 180, 255, 254, 246, 181, 255, 254, 246, 181, 255, 254, 246, 181, 255, 254, 246, 182, 255, 254, 246, 182, 255, 254, 246, 182, 255, 254, 246, 183, 255, 254, 247, 183, 255, 254, 247, 184, 255, 254, 247, 184, 255, 254, 247, 184, 255, 254, 247, 185, 255, 254, 247, 185, 255, 254, 247, 185, 255, 254, 248, 186, 255, 254, 248, 186, 255, 254, 248, 186, 255, 254, 248, 187, 255, 254, 248, 187, 255, 254, 248, 187, 255, 254, 248, 188, 255, 254, 249, 188, 255, 254, 249, 188, 255, 254, 249, 189, 255, 254, 249, 189, 255, 254, 249, 189, 255, 254, 249, 190, 255, 254, 249, 190, 255, 254, 249, 190, 255, 254, 250, 191, 255, 254, 250, 191, 255, 254, 250, 191, 255, 254, 250, 192, 255, 254, 250, 192, 255, 254, 250, 192, 255, 254, 250, 193, 255, 254, 251, 193, 255, 254, 251, 194, 255, 254, 251, 194, 255, 254, 251, 194, 255, 254, 251, 195, 255, 254, 251, 195, 255, 254, 251, 195, 255, 254, 251, 196, 255, 254, 252, 196, 255, 254, 252, 196, 255, 254, 252, 197, 255, 254, 252, 197, 255, 254, 252, 197, 255, 254, 252, 198, 255, 254, 252, 198, 255, 254, 253, 198, 255, 254, 253, 199, 255, 254, 253, 199, 255, 254, 253, 199, 255, 254, 253, 200, 255, 254, 253, 200, 255, 254, 253, 200, 255, 254, 253, 201, 255, 254, 254, 201, 255, 254, 254, 201, 255, 254, 254, 202, 255, 254, 254, 202, 255, 254, 254, 202, 255, 254, 254, 203, 255, 254, 254, 203, 255
    };
    */
    static const heatmap_colorscheme_t discrete = { discrete_data, sizeof(discrete_data)/sizeof(discrete_data[0]/4) };
    const heatmap_colorscheme_t* colorscheme = &discrete;
    float weight;
    //cout << "got here 1" << endl;
    for(int y = 0; y < ySize; y++){
        for(int x = 0; x < xSize; x++){
            weight = 10*((carryCapacity - grid[year][y][x])/carryCapacity);
            heatmap_add_weighted_point_with_stamp(newMap, x*output[4], y*output[4], weight, stamp);
        }
    }
    //cout << "got here 2" << endl;

    heatmap_stamp_free(stamp);
    std::vector<unsigned char> image((xSize*output[4])*(ySize*output[4])*4);
    heatmap_render_to(newMap, colorscheme, &image[0]);
    heatmap_free(newMap);
    std::vector<unsigned char> png;
    if(unsigned error = lodepng::encode(directory + "/" + name + "_heatmap"+to_string(year)+".png", image, xSize*output[4], ySize*output[4])) {
        std::cerr << "encoder error " << error << ": "<< lodepng_error_text(error) << std::endl;
    }

}

void processor::generateOutput(){
    qDebug() << "at generate output";
    if(output[0] == 2){
        //emit progressImages(1);
        generateHeatmap(years);
    }
    else if(output[0] == 1){
        for(int i = 1; i < years + 1; i++){
            //emit progressImages(i);
            generateHeatmap(i);
            //emit progressImages(i);
        }
    }
    qDebug() << "finished generating heatmaps";

    if(output[1] == 2){
        generateCSV(years);
    }
    else if(output[1] == 1){
        for(int i = 1; i < years + 1; i++){
            generateCSV(i);
        }
    }


    if(output[2] == 1){
        dumpConfig(false);
    }
    else if(output[2] == 1){
        dumpConfig(true);
    }
    /*
    if(output[3] == 1){
        savePopulations();
    }
    */
    qDebug() << "output generation finished";
}

void processor::generateCSV(int t){
    std::cout << "at generate csv, dir: " << directory << " name: " << name << std::endl;
    ofstream outfile;
    outfile.open(directory + "/" + name + "_year" + to_string(t) + ".csv");
    for(int i = 0; i < ySize; i++){
        for(int j = 0; j < xSize; j++){
            outfile << grid[t][i][j];
            if(j < xSize - 1){
                outfile << ",";
            }
        }
        outfile << "\n";
    }
    outfile.close();
}

void processor::dumpConfig(bool pop){
    QString filename = QString::fromStdString(directory) + "/" + QString::fromStdString(name) + "_config.cfg";
    QFile config(filename);
    if (!config.open(QIODevice::WriteOnly | QIODevice::Text)){
        return;
    }

    QTextStream out(&config);
    out << "SimulationName: " << QString::fromStdString(name) << "\n";
    if(!config.flush()){
        qDebug() << "error writing config file!";
        config.close();
        return;
    }
    out << "SimulationDuration: " << years << "\n";
    out << "CarryingCapacity: " << carryCapacity<< "\n";
    out << "HunterTravelRange: " << huntRange<< "\n";
    out << "HuntsPerYear: " << HpHy << "\n";
    out << "KillProbability: " << killProb << "\n";
    out << "AnimalGrowthRate: " << animalGrowthRate<< "\n";
    out << "Height: " << xSize << "\n";
    out << "Width: " << ySize << "\n";
    if(geolocation){
        out << "Geolocation: " << "on" << "\n";
        out << "Latitude: " << geoX << "\n";
        out << "Longitude: " << geoY << "\n";
    }
    else{
        out << "Geolocation: " << "off" << "\n";
    }
    out << "AnimalDiffusionRate: " << animalDiffRate << "\n";
    out << "EncounterRate: " << encounterRate << "\n";
    out << "Theta: " << theta << "\n";
    out << "DiffusionSamples: " << diffusionSamples << "\n";

    //out << ": " << << "\n";
    out << "OutputSettings:";
    for(int i = 0; i < 5; i++){
        out << " " << output[i];
    }
    if(pop){
        qDebug() << "write population data now";
    }

    config.close();
}

void processor::savePopulations(){

}

processor::~processor(){
    if(grid != nullptr){
        for(int i = 0; i < years + 1; i++){
            for(int j = 0; j < ySize; j++){
                free(grid[i][j]);
            }
            free(grid[i]);
        }
        free(grid);
    }

    free(output);
    //cleanup towns
}
